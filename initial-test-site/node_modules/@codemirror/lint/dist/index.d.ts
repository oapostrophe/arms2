import { EditorView, Command, KeyBinding } from '@codemirror/view';
import { EditorState, TransactionSpec, Extension } from '@codemirror/state';

interface Diagnostic {
    from: number;
    to: number;
    severity: "info" | "warning" | "error";
    source?: string;
    message: string;
    actions?: readonly Action[];
}
interface Action {
    name: string;
    apply: (view: EditorView, from: number, to: number) => void;
}
declare function setDiagnostics(state: EditorState, diagnostics: readonly Diagnostic[]): TransactionSpec;
declare const openLintPanel: Command;
declare const closeLintPanel: Command;
declare const nextDiagnostic: Command;
declare const lintKeymap: readonly KeyBinding[];
declare function linter(source: (view: EditorView) => readonly Diagnostic[] | Promise<readonly Diagnostic[]>): Extension;

export { Action, Diagnostic, closeLintPanel, lintKeymap, linter, nextDiagnostic, openLintPanel, setDiagnostics };
