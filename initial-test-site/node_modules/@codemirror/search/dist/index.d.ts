import { Command, KeyBinding } from '@codemirror/view';
import { Extension, StateCommand } from '@codemirror/state';
import { Text } from '@codemirror/text';

declare class SearchCursor implements Iterator<{
    from: number;
    to: number;
}> {
    private iter;
    value: {
        from: number;
        to: number;
    };
    done: boolean;
    private matches;
    private buffer;
    private bufferPos;
    private bufferStart;
    private normalize;
    private query;
    constructor(text: Text, query: string, from?: number, to?: number, normalize?: (string: string) => string);
    private peek;
    next(): this;
    private match;
}

declare const gotoLine: Command;

declare type HighlightOptions = {
    highlightWordAroundCursor?: boolean;
    minSelectionLength?: number;
    maxMatches?: number;
};
declare function highlightSelectionMatches(options?: HighlightOptions): Extension;

declare const findNext: Command;
declare const findPrevious: Command;
declare const selectMatches: Command;
declare const selectSelectionMatches: StateCommand;
declare const replaceNext: Command;
declare const replaceAll: Command;
declare const openSearchPanel: Command;
declare const closeSearchPanel: Command;
declare const searchKeymap: readonly KeyBinding[];

export { SearchCursor, closeSearchPanel, findNext, findPrevious, gotoLine, highlightSelectionMatches, openSearchPanel, replaceAll, replaceNext, searchKeymap, selectMatches, selectSelectionMatches };
