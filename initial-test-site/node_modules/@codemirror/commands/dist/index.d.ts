import { StateCommand } from '@codemirror/state';
import { Command, KeyBinding } from '@codemirror/view';

declare const cursorCharLeft: Command;
declare const cursorCharRight: Command;
declare const cursorCharForward: Command;
declare const cursorCharBackward: Command;
declare const cursorGroupLeft: Command;
declare const cursorGroupRight: Command;
declare const cursorGroupForward: Command;
declare const cursorGroupBackward: Command;
declare const cursorSyntaxLeft: Command;
declare const cursorSyntaxRight: Command;
declare const cursorLineUp: Command;
declare const cursorLineDown: Command;
declare const cursorPageUp: Command;
declare const cursorPageDown: Command;
declare const cursorLineBoundaryForward: Command;
declare const cursorLineBoundaryBackward: Command;
declare const cursorLineStart: Command;
declare const cursorLineEnd: Command;
declare const cursorMatchingBracket: StateCommand;
declare const selectMatchingBracket: StateCommand;
declare const selectCharLeft: Command;
declare const selectCharRight: Command;
declare const selectCharForward: Command;
declare const selectCharBackward: Command;
declare const selectGroupLeft: Command;
declare const selectGroupRight: Command;
declare const selectGroupForward: Command;
declare const selectGroupBackward: Command;
declare const selectSyntaxLeft: Command;
declare const selectSyntaxRight: Command;
declare const selectLineUp: Command;
declare const selectLineDown: Command;
declare const selectPageUp: Command;
declare const selectPageDown: Command;
declare const selectLineBoundaryForward: Command;
declare const selectLineBoundaryBackward: Command;
declare const selectLineStart: Command;
declare const selectLineEnd: Command;
declare const cursorDocStart: StateCommand;
declare const cursorDocEnd: StateCommand;
declare const selectDocStart: StateCommand;
declare const selectDocEnd: StateCommand;
declare const selectAll: StateCommand;
declare const selectLine: StateCommand;
declare const selectParentSyntax: StateCommand;
declare const simplifySelection: StateCommand;
declare const deleteCodePointBackward: Command;
declare const deleteCodePointForward: Command;
declare const deleteCharBackward: Command;
declare const deleteCharForward: Command;
declare const deleteGroupBackward: StateCommand;
declare const deleteGroupForward: StateCommand;
declare const deleteToLineEnd: Command;
declare const deleteTrailingWhitespace: StateCommand;
declare const splitLine: StateCommand;
declare const transposeChars: StateCommand;
declare const moveLineUp: StateCommand;
declare const moveLineDown: StateCommand;
declare const copyLineUp: StateCommand;
declare const copyLineDown: StateCommand;
declare const deleteLine: Command;
declare const insertNewline: StateCommand;
declare const insertNewlineAndIndent: StateCommand;
declare const indentSelection: StateCommand;
declare const indentMore: StateCommand;
declare const indentLess: StateCommand;
declare const insertTab: StateCommand;
declare const emacsStyleKeymap: readonly KeyBinding[];
declare const standardKeymap: readonly KeyBinding[];
declare const defaultKeymap: readonly KeyBinding[];
declare const defaultTabBinding: KeyBinding;

export { copyLineDown, copyLineUp, cursorCharBackward, cursorCharForward, cursorCharLeft, cursorCharRight, cursorDocEnd, cursorDocStart, cursorGroupBackward, cursorGroupForward, cursorGroupLeft, cursorGroupRight, cursorLineBoundaryBackward, cursorLineBoundaryForward, cursorLineDown, cursorLineEnd, cursorLineStart, cursorLineUp, cursorMatchingBracket, cursorPageDown, cursorPageUp, cursorSyntaxLeft, cursorSyntaxRight, defaultKeymap, defaultTabBinding, deleteCharBackward, deleteCharForward, deleteCodePointBackward, deleteCodePointForward, deleteGroupBackward, deleteGroupForward, deleteLine, deleteToLineEnd, deleteTrailingWhitespace, emacsStyleKeymap, indentLess, indentMore, indentSelection, insertNewline, insertNewlineAndIndent, insertTab, moveLineDown, moveLineUp, selectAll, selectCharBackward, selectCharForward, selectCharLeft, selectCharRight, selectDocEnd, selectDocStart, selectGroupBackward, selectGroupForward, selectGroupLeft, selectGroupRight, selectLine, selectLineBoundaryBackward, selectLineBoundaryForward, selectLineDown, selectLineEnd, selectLineStart, selectLineUp, selectMatchingBracket, selectPageDown, selectPageUp, selectParentSyntax, selectSyntaxLeft, selectSyntaxRight, simplifySelection, splitLine, standardKeymap, transposeChars };
