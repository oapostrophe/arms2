import { RangeValue, Range, RangeSet } from '@codemirror/rangeset';
import { EditorView, BlockInfo, ViewUpdate } from '@codemirror/view';
import { Extension, Facet, EditorState } from '@codemirror/state';

declare abstract class GutterMarker extends RangeValue {
    abstract eq(other: GutterMarker): boolean;
    toDOM(_view: EditorView): Node | null;
    at(pos: number): Range<this>;
    elementClass: string;
}
declare type Handlers = {
    [event: string]: (view: EditorView, line: BlockInfo, event: any) => boolean;
};
interface GutterConfig {
    class?: string;
    renderEmptyElements?: boolean;
    markers?: (view: EditorView) => (RangeSet<GutterMarker> | readonly RangeSet<GutterMarker>[]);
    lineMarker?: (view: EditorView, line: BlockInfo, otherMarkers: readonly GutterMarker[]) => GutterMarker | null;
    initialSpacer?: null | ((view: EditorView) => GutterMarker);
    updateSpacer?: null | ((spacer: GutterMarker, update: ViewUpdate) => GutterMarker);
    domEventHandlers?: Handlers;
}
declare function gutter(config: GutterConfig): Extension;
declare function gutters(config?: {
    fixed?: boolean;
}): Extension;
interface LineNumberConfig {
    formatNumber?: (lineNo: number, state: EditorState) => string;
    domEventHandlers?: Handlers;
}
declare const lineNumberMarkers: Facet<RangeSet<GutterMarker>, readonly RangeSet<GutterMarker>[]>;
declare function lineNumbers(config?: LineNumberConfig): Extension;

export { GutterMarker, gutter, gutters, lineNumberMarkers, lineNumbers };
